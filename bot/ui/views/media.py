from discord import ui, ButtonStyle, Interaction, Embed, Colour
from ...music import GM
from ...music.voice import VoiceManager
from ...music.YM.Track import Track


def check_voice(func):
    async def wrapper(*args, **kwargs):
        if args[1].user.voice:
            return await func(*args)
        else:
            await args[1].response.send_message(
                "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!",
                ephemeral=True
            )
    return wrapper


class MediaPlayer(ui.View):
    def __init__(self):
        super().__init__(timeout=None)


    @ui.button(label="‚è∏", style=ButtonStyle.green, custom_id="play_or_pause")
    @check_voice
    async def play_or_pause(self, interaction: Interaction, button: ui.Button):
        VM: VoiceManager = await GM.get_guild(interaction.user.voice.channel, interaction.channel)
        if not interaction.user.voice.channel or interaction.user.voice.channel.id != VM.voiceChannel.id:
            await interaction.response.send_message(
                "–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–ª–æ—Å–æ–º –∫–∞–Ω–∞–ª–µ!",
                ephemeral=True
            )
        else:
            if not VM.voiceClient.is_paused():
                VM.voiceClient.pause()
                button.label = "‚ñ∂Ô∏è"
                button.style = ButtonStyle.red
            else:
                VM.voiceClient.resume()
                button.label = "‚è∏"
                button.style = ButtonStyle.green
            await interaction.response.edit_message(view=self)
            
    
    @ui.button(label="‚è©", style=ButtonStyle.blurple, custom_id="skip_track")
    @check_voice
    async def skip_track(self, interaction: Interaction, button: ui.Button):
        VM: VoiceManager = await GM.get_guild(interaction.user.voice.channel, interaction.channel)
        if not interaction.user.voice.channel or interaction.user.voice.channel.id != VM.voiceChannel.id:
            await interaction.response.send_message(
                "–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–ª–æ—Å–æ–º –∫–∞–Ω–∞–ª–µ!",
                ephemeral=True
            )
        else:
            VM.voiceClient.stop()

            await interaction.response.edit_message(view=self)
    

    @ui.button(label="‚è≠", style=ButtonStyle.blurple, custom_id="skip_playlist")
    @check_voice
    async def skip_playlist(self, interaction: Interaction, button: ui.Button):
        VM: VoiceManager = await GM.get_guild(interaction.user.voice.channel, interaction.channel)
        if not interaction.user.voice.channel or interaction.user.voice.channel.id != VM.voiceChannel.id:
             await interaction.response.send_message(
                "–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–ª–æ—Å–æ–º –∫–∞–Ω–∞–ª–µ!",
                ephemeral=True
            )
        else:
            VM.counter = 0
            await VM.skip(playlist=True)
            VM.voiceClient.stop()
            await interaction.response.edit_message(view=self)


    @ui.button(label="‚èπ", style=ButtonStyle.red, custom_id="stop")
    @check_voice
    async def stop(self, interaction: Interaction, button:ui.Button):
        VM: VoiceManager = await GM.get_guild(interaction.user.voice.channel, interaction.channel)
        if not interaction.user.voice.channel or interaction.user.voice.channel.id != VM.voiceChannel.id:
             await interaction.response.send_message(
                "–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–ª–æ—Å–æ–º –∫–∞–Ω–∞–ª–µ!",
                ephemeral=True
            )
        else:
            VM.queue.clear()
            VM.voiceClient.stop()

    
    @ui.button(label="‚ùî", style=ButtonStyle.grey, custom_id="help", row=1)
    async def help(self, interaction: Interaction, button: ui.Button):
        embed = Embed(
            title="–ü–æ–¥—Å–∫–∞–∑–∫–∞",
            colour=Colour.green()
        )

        embed.description = "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –¢—Ä–µ–∫–∏/–ê–ª—å–±–æ–º—ã/–ü–ª–µ–π–ª–∏—Å—Ç—ã/–ü–æ–¥–∫–∞—Å—Ç—ã/–ö–Ω–∏–≥–∏" \
                            " –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∏!\n\n" \
                            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É/–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –ø–µ—Å–Ω–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: </play:1111348061596287157>\n\n" \
                            
        embed.add_field(
            name="–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º",
            value = "`‚ñ∂Ô∏è\‚è∏` - –ü–∞—É–∑–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è.\n" \
                    "`‚è©` - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω –¢—Ä–µ–∫\–ü–æ–¥–∫–∞—Å—Ç\–ö–Ω–∏–≥—É –≤ –æ—á–µ—Ä–µ–¥–∏.\n" \
                    "`‚è≠` - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ü–µ–ª—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –≤ –æ—á–µ—Ä–µ–¥–∏.\n" \
                    "`‚èπ` - –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –∏ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å!\n" \
                    "`üìÉ` - –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤."
        )
        await interaction.response.send_message(
            embed=embed,
            ephemeral=True
        )
    

    @ui.button(label="üìÉ", style=ButtonStyle.blurple, custom_id="queue", row=1)
    @check_voice
    async def queue(self, interaction: Interaction, button: ui.Button):
        embed = Embed(
            title="–û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤"
        )

        VM: VoiceManager = await GM.get_guild(interaction.user.voice.channel, interaction.channel)

        for mediaItem in VM.queue[:8]:
            if isinstance(mediaItem, Track):
                mediaItemQueue = []
                if mediaItem.artists:
                    artists = ", ".join([artist.name for artist in mediaItem.artists])
                    mediaItemQueue.append(f"**{artists}** - _{mediaItem.title}_")
                else:
                    mediaItemQueue.append(f"_{mediaItem.title}_")
        
                embed.add_field(
                    name="–¢—Ä–µ–∫",
                    value='\n'.join(mediaItemQueue)
                )
            else:
                mediaItemQueue = []
                for index, item in enumerate(mediaItem.tracks[:8]):
                    if item.artists:
                        artists = ", ".join([artist.name for artist in item.artists])
                        mediaItemQueue.append(f"{index+1}. **{artists}** - _{item.title}_")
                    else:
                        mediaItemQueue.append(f"{index+1}. _{item.title}_")

                embed.add_field(
                    name = mediaItem.title,
                    value=('\n'.join(mediaItemQueue)) + f"\n\n –ò –µ—â—ë {len(mediaItem.tracks) - 8} —Ç—Ä–µ–∫–æ–≤!"
                )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)





